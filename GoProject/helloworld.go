package main

import "fmt"

/*
ในภาษา Go สามารถประกาศอาร์เรย์ได้ 2 วิธี คือ การใช้คีย์เวิร์ด var และการประกาศแบบสั้น (shorthand declaration)

การเข้าถึงสมาชิกในอาร์เรย์จะเริ่มจากตำแหน่ง 0 ซึ่งเป็นสมาชิกตัวแรก ดังนั้น ตำแหน่งของสมาชิกตัวสุดท้ายจะเป็น n-1 โดยที่ n คือ ขนาดของอาร์เรย์

การเข้าถึงสมาชิกในอาร์เรย์ใช้รูปแบบ a[index] โดยที่ a คือ ตัวแปรอาร์เรย์
*/



func main() {
	// ประกาศอาร์เรย์โดยใช้คีย์เวิร์ด var
	var numbers [5]int
	numbers[0] = 10
	numbers[1] = 20
	numbers[2] = 30
	numbers[3] = 40
	numbers[4] = 50

	// ประกาศอาร์เรย์แบบสั้น (shorthand declaration)
	names := [3]string{"Alice", "Bob", "Charlie"}
	// เข้าถึงสมาชิกในอาร์เรย์
	fmt.Println(numbers[0]) // ผลลัพธ์: 10
	fmt.Println(numbers[2]) // ผลลัพธ์: 30
	fmt.Println(names[1]) // ผลลัพธ์: Bob

	// วนลูปแสดงค่าสมาชิกในอาร์เรย์
	for i := 0; i < len(numbers); i++ {
		fmt.Println(numbers[i])
	}

	for i, name := range names {
		fmt.Printf("names[%d] = %s\n", i, name)
	}
}

/*
ในตัวอย่างข้างต้น เราประกาศอาร์เรย์ numbers โดยใช้คีย์เวิร์ด var และกำหนดขนาดเป็น 5 จากนั้นกำหนดค่าให้กับสมาชิกในอาร์เรย์โดยใช้ตัวดำเนินการ [] และระบุตำแหน่งของสมาชิกที่ต้องการ

นอกจากนี้ยังสามารถประกาศอาร์เรย์แบบสั้นได้ ดังตัวอย่างอาร์เรย์ names ที่ประกาศและกำหนดค่าสมาชิกในบรรทัดเดียวกัน

การเข้าถึงสมาชิกในอาร์เรย์ทำได้โดยใช้ตัวดำเนินการ [] และระบุตำแหน่งของสมาชิกที่ต้องการ

นอกจากนี้ยังสามารถใช้ loop for เพื่อวนลูปแสดงค่าสมาชิกในอาร์เรย์ได้ทั้งแบบใช้ตัวนับ (index) และแบบใช้ range เพื่อดึงค่าสมาชิกออกมาใช้งานโดยตรง

range คือ คีย์เวิร์ดในภาษา Go ที่ใช้สำหรับวนลูปอาร์เรย์ (array), สไลซ์ (slice), แมป (map) หรือช่องสัญญาณ (channel) โดยในแต่ละรอบของลูป range จะดึงค่าสมาชิกออกมาใช้งานทีละคู่ ซึ่งประกอบด้วย index และ value

เมื่อใช้ range กับอาร์เรย์หรือสไลซ์ ในแต่ละรอบจะได้ index และ value ของสมาชิกในอาร์เรย์หรือสไลซ์นั้นๆ ตามลำดับ
*/
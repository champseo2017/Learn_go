package main

import "fmt"

/*
การกำหนดค่าเริ่มต้นให้กับอาร์เรย์ในภาษา Go สามารถทำได้โดยใช้ array literal ซึ่งประกอบด้วยจำนวนสมาชิกในอาร์เรย์ในวงเล็บเหลี่ยม ตามด้วยชนิดข้อมูลของสมาชิก และค่าเริ่มต้นของสมาชิกแต่ละตัวในวงเล็บปีกกา โดยไม่จำเป็นต้องกำหนดค่าเริ่มต้นให้กับสมาชิกทุกตัวก็ได้

หากไม่ได้กำหนดค่าเริ่มต้นให้กับอาร์เรย์ สมาชิกในอาร์เรย์จะมีค่าเริ่มต้นเป็น zero value ตามชนิดข้อมูลของอาร์เรย์

เราสามารถใช้เครื่องหมาย ellipses (...) แทนการระบุขนาดของอาร์เรย์ได้ โดยคอมไพเลอร์จะระบุขนาดของอาร์เรย์ตามจำนวนสมาชิกที่กำหนดในการประกาศอาร์เรย์

นอกจากนี้ Go ยังมีฟังก์ชัน len ที่ใช้ในการหาความยาวของอาร์เรย์ได้

เราสามารถกำหนดค่าให้กับสมาชิกในอาร์เรย์ที่ตำแหน่งใดๆ ได้โดยใช้ array[index] = value และสามารถเข้าถึงค่าของสมาชิกในอาร์เรย์ได้โดยใช้ array[index]
*/

func main() {
	a := [5]int{2, 4, 6, 8, 10} // กำหนดค่าเริ่มต้นให้กับอาร์เรย์ a
	var b [5]int = [5]int{1, 3} // กำหนดค่าเริ่มต้นบางส่วนให้กับอาร์เรย์ b
	fmt.Println("Array a:", a)
	fmt.Println("Array b:", b)
	
	c := [...]int{5, 10, 15, 20, 25} // ใช้ ellipses (...) แทนการระบุขนาดอาร์เรย์
	fmt.Println("Length of Array:", len(c)) // ใช้ฟังก์ชัน len หาความยาวของอาร์เรย์

	d := [5]int{0: 5, 2: 10, 4: 15} // กำหนดค่าเริ่มต้นให้กับสมาชิกที่ตำแหน่งใดๆ ในอาร์เรย์
	fmt.Println("Array d:", d)

	var e [5]int
	fmt.Println("Empty array:", e)
	e[3] = 10 // กำหนดค่าให้กับสมาชิกที่ตำแหน่ง 3 ในอาร์เรย์ e
	fmt.Println("Array e:", e)
	fmt.Println("Value assigned at 3rd array index:", e[3]) // เข้าถึงค่าของสมาชิกที่ตำแหน่ง 3 ในอาร์เรย์ e

}

/*
ในตัวอย่างข้างต้น เราได้ทำการกำหนดค่าเริ่มต้นให้กับอาร์เรย์ในหลายรูปแบบ เช่น กำหนดค่าเริ่มต้นให้กับสมาชิกทุกตัว กำหนดค่าเริ่มต้นบางส่วน ใช้ ellipses แทนการระบุขนาดอาร์เรย์ กำหนดค่าเริ่มต้นให้กับสมาชิกที่ตำแหน่งใดๆ ในอาร์เรย์ และกำหนดค่าให้กับสมาชิกที่ตำแหน่งใดๆ หลังจากประกาศอาร์เรย์แล้ว

นอกจากนี้เรายังได้ใช้ฟังก์ชัน len เพื่อหาความยาวของอาร์เรย์ และใช้ array[index] เพื่อเข้าถึงค่าของสมาชิกในอาร์เรย์ที่ตำแหน่งใดๆ
*/
package main

import (
	"fmt"
	"strconv"
)

/*

 การใช้ FormatFloat() แปลงค่าเลขทศนิยมไปเป็นสตริง

 ฟังก์ชัน `strconv.FormatFloat` ในภาษา Go ใช้สำหรับแปลงค่าจำนวนทศนิยม (floating-point number) เป็นสตริงตามรูปแบบที่กำหนด สำหรับพารามิเตอร์ที่รับเข้ามามีดังนี้:

1. ค่าทศนิยมที่ต้องการแปลง (ในตัวอย่างนี้คือ `26.123456789`) คือค่าที่ต้องการจะแปลงเป็นสตริง
2. รูปแบบการแสดงผล (`'b'` ในตัวอย่าง) ระบุว่าจะแสดงค่าทศนิยมในรูปแบบไหน เช่น
   - `'f'` สำหรับการแสดงผลแบบปกติ (เช่น `123.456`)
   - `'b'` สำหรับการแสดงผลในรูปแบบที่ไม่มีการปัดเศษและไม่ใช้เลขชี้กำลัง (scientific notation)
   - `'e'` หรือ `'E'` สำหรับการแสดงผลแบบมีเลขชี้กำลัง (เช่น `1.23456e+02`)
   - `'g'` หรือ `'G'` สำหรับการเลือกรูปแบบการแสดงผลที่ดีที่สุดระหว่าง `'f'` และ `'e'`
3. จำนวนหลักทศนิยมที่ต้องการแสดง (`4` ในตัวอย่าง) คือความแม่นยำหรือจำนวนหลักทศนิยมที่ต้องการแสดงหลังจุดทศนิยม
4. ขนาดของตัวเลขทศนิยมที่ใช้ในการคำนวณ (`64` ในตัวอย่าง) ซึ่งระบุว่าจะใช้ floating-point number ขนาด 32 บิตหรือ 64 บิต ในกรณีนี้คือ 64 บิต

ดังนั้น, `s1 := strconv.FormatFloat(26.123456789, 'b', 4, 64)` จะแปลงค่า `26.123456789` เป็นสตริงโดยใช้รูปแบบที่ไม่มีการปัดเศษและไม่ใช้เลขชี้กำลัง, แสดงจำนวนหลักทศนิยม 4 หลัก, และคำนวณด้วยความแม่นยำ 64 บิต, ผลลัพธ์ที่ได้จะถูกเก็บไว้ในตัวแปร `s1` และจะแสดงออกมาเมื่อเรียกใช้ `fmt.Println(s1)`.

*/

func main() {
   
	s1 := strconv.FormatFloat(26.123456789, 'b', 4, 64)
	fmt.Println(s1)

	s2 := strconv.FormatFloat(26.123456789, 'e', 2, 64)
	fmt.Println(s2)

	s3 := strconv.FormatFloat(26.123456789, 'E', 2, 64)
	fmt.Println(s3)

	s4 := strconv.FormatFloat(26.123456789, 'f', 0, 64)
	fmt.Println(s4)

	s5 := strconv.FormatFloat(26123456.789, 'g', -1, 64)
	fmt.Println(s5)

	s6 := strconv.FormatFloat(26.123456789, 'G', 5, 64)
	fmt.Println(s6)

	s7 := strconv.FormatFloat(26.123456789, 'X', 4, 64)
	fmt.Println(s7)

	s8 := strconv.FormatFloat(26.123456789, 'X', 4, 64)
	fmt.Println(s8)

}

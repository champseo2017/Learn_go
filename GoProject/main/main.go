package main

import (
	"fmt"
)

/*
ปรับปรุงให้กระชับขึ้นได้ โดยใช้การประกาศตัวแปรในการวนลูปอ่านค่าจาก channel
*/

func main() {
	ch := make(chan int) // สร้าง channel ที่เก็บข้อมูลประเภท int

	go func() { // สร้าง goroutine เพื่อส่งข้อมูลเข้า channel
		for i := 0; i < 10; i++ {
			ch <- i // ส่งค่า i เข้า channel
		}
		close(ch) // ปิด channel เมื่อส่งข้อมูลครบแล้ว
	}()

	for val, ok := <-ch; ok; val, ok = <-ch {
		// วนลูปอ่านค่าจาก channel โดยใช้การประกาศตัวแปรในลูป
		// ในแต่ละรอบของลูป:
		//   - อ่านค่าจาก channel และกำหนดให้กับตัวแปร val และ ok
		//   - ตรวจสอบค่าของ ok เพื่อดูว่า channel ยังเปิดอยู่หรือไม่
		//   - ถ้า ok เป็น false (channel ถูกปิดแล้ว) ลูปจะสิ้นสุด
		fmt.Println(val) // แสดงค่าที่อ่านได้จาก channel
	}
}

/*
ในตัวอย่างนี้ เราใช้การประกาศตัวแปร val และ ok ในการวนลูปอ่านค่าจาก channel แทนการใช้ for-loop แบบธรรมดา

ในแต่ละรอบของลูป ค่าที่อ่านได้จาก channel จะถูกกำหนดให้กับตัวแปร val และ ok จากนั้นเราตรวจสอบค่าของ ok เพื่อดูว่า channel ยังเปิดอยู่หรือไม่ ถ้า ok เป็น false (channel ถูกปิดแล้ว) ลูปจะสิ้นสุด

การใช้การประกาศตัวแปรในลูปช่วยให้โค้ดอ่านค่าจาก channel กระชับขึ้น โดยไม่ต้องเขียนโค้ดเพื่อตรวจสอบว่า channel ถูกปิดหรือไม่ และไม่ต้องใช้คำสั่ง break เพื่อออกจากลูปด้วยตนเอง
*/

package main

import (
	"fmt"
)

/*
สร้างสไลซ์โดยใช้ฟังก์ชัน `make()` เราสามารถใช้ `make()` เพื่อสร้างสไลซ์ที่มีความยาวเท่ากับอาร์เรย์ที่อยู่เบื้องหลัง เช่น `sl1 := make([]int, 10)` นอกจากนี้ เรายังสามารถใช้ `make()` เพื่อสร้างอาร์เรย์ที่อยู่เบื้องหลังสำหรับสไลซ์ที่มีขนาดใหญ่กว่าสไลซ์จริง เช่น `sl2 := make([]int, 10, 15)`
*/

func Slice_Create_Slice_Using_Make_Function() {
	// สร้างสไลซ์ sl1 ด้วยฟังก์ชัน make() โดยมีความยาว 10 และมีอาร์เรย์ที่อยู่เบื้องหลังมีขนาดเท่ากับความยาวของสไลซ์
	sl1 := make([]int, 10)

	// สร้างสไลซ์ sl2 ด้วยฟังก์ชัน make() โดยมีความยาว 10 แต่มีอาร์เรย์ที่อยู่เบื้องหลังมีขนาดเท่ากับ 15
	sl2 := make([]int, 10, 15)

	// สร้างสไลซ์ sl3 โดยใช้การตัดสไลซ์จาก sl2 ตั้งแต่ index 0 ถึง 13 (ไม่รวม 14)
	sl3 := sl2[0:14]

	// แสดงค่าของสไลซ์ sl1
	fmt.Println("This is slice 1", sl1)

	// แสดงค่าของสไลซ์ sl2
	fmt.Println("This is slice 2", sl2)

	// แสดงค่าของสไลซ์ sl3
	fmt.Println("This is slice 3", sl3)
}

func main() {

	Slice_Create_Slice_Using_Make_Function()

}

/*
การสร้างสไลซ์ด้วย `make()` และการสร้างสไลซ์แบบปกติมีความแตกต่างกันดังนี้:

1. การจองหน่วยความจำ:
   - การสร้างสไลซ์แบบปกติ: ไม่มีการจองหน่วยความจำสำหรับอาร์เรย์ที่อยู่เบื้องหลังล่วงหน้า สไลซ์จะถูกสร้างเป็น nil slice และมีความยาวและความจุเป็น 0
   - การสร้างสไลซ์ด้วย `make()`: มีการจองหน่วยความจำสำหรับอาร์เรย์ที่อยู่เบื้องหลังตามขนาดที่ระบุ สไลซ์จะถูกสร้างพร้อมกับอาร์เรย์ที่อยู่เบื้องหลัง

2. ความยาวและความจุเริ่มต้น:
   - การสร้างสไลซ์แบบปกติ: สไลซ์จะมีความยาวและความจุเป็น 0 เมื่อถูกสร้างขึ้นมา
   - การสร้างสไลซ์ด้วย `make()`: สามารถกำหนดความยาวและความจุเริ่มต้นของสไลซ์ได้ตามต้องการ

3. การเติบโตของสไลซ์:
   - การสร้างสไลซ์แบบปกติ: เมื่อเพิ่มข้อมูลลงในสไลซ์จนเกินความจุปัจจุบัน Go จะสร้างอาร์เรย์ใหม่ที่มีขนาดใหญ่ขึ้นและคัดลอกข้อมูลจากอาร์เรย์เดิมไปยังอาร์เรย์ใหม่ ซึ่งอาจส่งผลให้ประสิทธิภาพลดลง
   - การสร้างสไลซ์ด้วย `make()`: สามารถกำหนดความจุเริ่มต้นของสไลซ์ให้มากกว่าความยาวได้ ซึ่งช่วยลดการจัดสรรหน่วยความจำใหม่เมื่อสไลซ์เติบโต

4. ความยืดหยุ่น:
   - การสร้างสไลซ์แบบปกติ: ใช้สำหรับกรณีที่ไม่ทราบขนาดของข้อมูลล่วงหน้า และต้องการสไลซ์ที่สามารถเติบโตได้อย่างอัตโนมัติ
   - การสร้างสไลซ์ด้วย `make()`: ใช้สำหรับกรณีที่ทราบขนาดของข้อมูลล่วงหน้า หรือต้องการกำหนดความยาวและความจุเริ่มต้นของสไลซ์

โดยสรุป การสร้างสไลซ์ด้วย `make()` เหมาะสำหรับกรณีที่ต้องการควบคุมการจัดสรรหน่วยความจำและประสิทธิภาพของสไลซ์ ในขณะที่การสร้างสไลซ์แบบปกติเหมาะสำหรับกรณีที่ต้องการความยืดหยุ่นและไม่ทราบขนาดของข้อมูลล่วงหน้า
*/

package main

import (
	"GoProject/module"
	"fmt"
)

/*
โปรแกรมนี้แสดงให้เห็นถึงความแตกต่างระหว่างโครงสร้าง (struct) และฟิลด์ของโครงสร้างที่ส่งออก (exported) และไม่ได้ส่งออก (unexported) ในภาษา Go โดยมีโครงสร้างโฟลเดอร์และไฟล์ดังนี้

ไฟล์ city.go และ employee.go อยู่ในแพ็คเกจ module ในขณะที่ไฟล์ main.go อยู่ในแพ็คเกจ main
ในไฟล์ city.go มีการสร้างโครงสร้าง city ที่ไม่ได้ส่งออก และมีฟิลด์ city_name และ state ที่ไม่ได้ส่งออกเช่นกัน ทำให้โครงสร้างและฟิลด์เหล่านี้สามารถเข้าถึงได้เฉพาะภายในแพ็คเกจ module เท่านั้น
ในไฟล์ employee.go มีการสร้างโครงสร้าง Employee ที่ส่งออก และมีฟิลด์ Id และ City ที่ส่งออก ในขณะที่ฟิลด์ employee_name ไม่ได้ส่งออก ทำให้โครงสร้าง Employee และฟิลด์ Id และ City สามารถเข้าถึงได้จากภายนอกแพ็คเกจ module แต่ฟิลด์ employee_name สามารถเข้าถึงได้เฉพาะภายในแพ็คเกจ module เท่านั้น
ในไฟล์ main.go มีการสร้างอินสแตนซ์ของโครงสร้าง Employee และกำหนดค่าให้กับฟิลด์ Id และ City จากนั้นแสดงค่าของอินสแตนซ์นั้น ซึ่งจะแสดงเฉพาะค่าของฟิลด์ที่ส่งออกเท่านั้น (Id และ City) ส่วนการเข้าถึงฟิลด์ employee_name หรือการสร้างอินสแตนซ์ของโครงสร้าง city จะทำให้เกิดข้อผิดพลาด เนื่องจากไม่สามารถเข้าถึงได้จากภายนอกแพ็คเกจ module
*/
func main() {
	// ใช้โครงสร้าง Employee จาก module
	e := module.Employee{
		Id: 100,
		City: "Pune",
	}
	fmt.Println("Employee ID and City= ", e)
	// การสร้างอินสแตนซ์ของโครงสร้าง city จะเกิดข้อผิดพลาด
    // เนื่องจากไม่สามารถเข้าถึงโครงสร้าง city ได้จากภายนอกแพ็คเกจ module
    // c := module.city{
    //     city_name: "Pune",
    //     state:     "Maharashtra",
    // }
    // fmt.Println("City and State= ", c)
}
/* 
จากตัวอย่างโค้ดข้างต้น สังเกตได้ว่าโครงสร้างและฟิลด์ที่ขึ้นต้นด้วยตัวอักษรพิมพ์ใหญ่ (Employee, Id, City) จะถูกส่งออกและสามารถเข้าถึงได้จากภายนอกแพ็คเกจ ในขณะที่โครงสร้างและฟิลด์ที่ขึ้นต้นด้วยตัวอักษรพิมพ์เล็ก (city, city_name, state, employee_name) จะไม่ถูกส่งออกและสามารถเข้าถึงได้เฉพาะภายในแพ็คเกจเดียวกันเท่านั้น
การแบ่งระดับการเข้าถึงของโครงสร้างและฟิลด์ในลักษณะนี้ ช่วยให้เราสามารถควบคุมการเข้าถึงข้อมูลและปกป้องข้อมูลที่ไม่จำเป็นต้องเปิดเผยให้กับภายนอกแพ็คเกจได้ ซึ่งเป็นแนวทางปฏิบัติที่ดีในการออกแบบและพัฒนาโปรแกรมที่มีความปลอดภัยและง่ายต่อการบำรุงรักษา

*/
package main

import (
	"fmt"
)

/*
ในภาษา Go เราสามารถสร้าง pointer ชี้ไปยัง slice ได้ แม้ว่าเราสามารถแก้ไขข้อมูลใน slice ได้โดยตรงผ่านการเรียกใช้ function ก็ตาม แต่การใช้ pointer ชี้ไปยัง slice ก็ยังมีประโยชน์ โดยเฉพาะอย่างยิ่งในการใช้งานกับ library มาตรฐานหรือ library ที่เราสร้างขึ้นเอง
slice เป็น dynamic data structure ที่สามารถเพิ่มจำนวนสมาชิกได้ตามต้องการ เมื่อเราแก้ไขค่าของสมาชิกใน slice ผ่านการเรียกใช้ function การเปลี่ยนแปลงนั้นจะสะท้อนกลับไปยัง caller function ด้วย อย่างไรก็ตาม หากเราเพิ่มสมาชิกใหม่เข้าไปใน slice ผ่านการเรียกใช้ function การเปลี่ยนแปลงนั้นจะไม่สะท้อนกลับไปยัง caller function ดังตัวอย่างใน Program 10.15
*/

func modify(s1 []int) {
	s1[0] = 100
	// แก้ไขค่าสมาชิกตำแหน่งที่ 0 ของ s1 เป็น 100

	s1 = append(s1, 60)
	// เพิ่มสมาชิก 60 เข้าไปใน s1

	s1 = append(s1, 70)
	// เพิ่มสมาชิก 70 เข้าไปใน s1
}

func main() {
	s1 := []int{10, 20, 30, 40, 50}
	// สร้าง slice s1 ที่มีสมาชิกเป็น 10, 20, 30, 40, 50

	modify(s1)
	// เรียกใช้ function modify โดยส่ง s1 เป็นอาร์กิวเมนต์

	fmt.Println("Slice Elements", s1)
	// แสดงผลสมาชิกของ s1 หลังจากเรียกใช้ function modify
}

/*
จะเห็นได้ว่าการแก้ไขค่าสมาชิกใน slice ผ่าน function modify ส่งผลให้ค่าสมาชิกตำแหน่งที่ 0 ถูกเปลี่ยนเป็น 100 ใน main function ด้วย แต่การเพิ่มสมาชิก 60 และ 70 เข้าไปใน slice ผ่าน function modify ไม่ได้ส่งผลให้ slice ใน main function มีสมาชิกเพิ่มขึ้น
*/

package main

import (
	"fmt"
)

/*
การใช้ `append` กับสไลซ์และ Hash Table:

การใช้ `append` กับสไลซ์:
- `append` ใช้สำหรับเพิ่มข้อมูลเข้าไปในสไลซ์
- หากอาร์เรย์ที่อยู่เบื้องหลังไม่เพียงพอ Go จะสร้างอาร์เรย์ใหม่และให้สไลซ์ชี้ไปยังอาร์เรย์ใหม่นั้น
- การเปลี่ยนแปลงค่าในสไลซ์ที่อ้างอิงถึงอาร์เรย์ใหม่ จะไม่ส่งผลต่อสไลซ์ที่อ้างอิงถึงอาร์เรย์เดิม

Hash Table:
- โครงสร้างข้อมูลที่ใช้สำหรับการเข้าถึงข้อมูลได้อย่างรวดเร็ว
- ประกอบด้วยคู่ของ key และ value โดย key ต้องเป็นเอกลักษณ์
- ใช้ฟังก์ชัน hash ในการคำนวณตำแหน่งหน่วยความจำสำหรับเก็บ value
- การค้นหาข้อมูลใน Hash Table ใช้เวลา O(1) ซึ่งเร็วกว่าการค้นหาแบบเชิงเส้นใน Array ที่ใช้เวลา O(n)
*/

func Append_In_Slices() {
	// สร้างอาร์เรย์ arr ที่มีขนาด 3 และมีค่าเริ่มต้นเป็น [12, 34, 54]
	arr := [3]int{12, 34, 54}

	// สร้างสไลซ์ s1 โดยอ้างอิงถึงอาร์เรย์ arr ทั้งหมด
	s1 := arr[:]

	// เพิ่มค่า 2000 เข้าไปในสไลซ์ s1 ด้วยเมธอด append และกำหนดผลลัพธ์ให้กับ s2
	// หากอาร์เรย์ที่อยู่เบื้องหลังไม่เพียงพอ Go จะสร้างอาร์เรย์ใหม่
	s2 := append(s1, 2000)

	// สร้างสไลซ์ s3 โดยอ้างอิงถึงสไลซ์ s2 ทั้งหมด
	s3 := s2[:]

	// เปลี่ยนค่าที่ index 3 ของสไลซ์ s3 เป็น 6000
	s3[3] = 6000

	// แสดงค่าของสไลซ์ s1, s2, s3 และอาร์เรย์ arr
	fmt.Println(s1, s2, s3, arr)
}

func main() {

	Append_In_Slices()

}

/*

 */

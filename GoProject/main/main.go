package main

import (
	"fmt"
	"log"
	"os"
)

/*

เกี่ยวกับ error ต่อ ในภาษา Go:

- ภาษา Go มี error type ในตัว ซึ่งสามารถกำหนดให้กับตัวแปรและส่งคืนจากฟังก์ชันได้
- ฟังก์ชันหรือเมธอดที่อาจทำให้เกิดข้อผิดพลาดมักจะส่งคืน error เป็นค่าสุดท้าย แต่ไม่จำเป็นต้องเป็นเช่นนั้นเสมอไป
- ในไลบรารีมาตรฐานของ Go มีฟังก์ชันหลายตัวที่ส่งคืน error เช่น `os.Open` และ `os.Mkdir`
- เมื่อเรียกใช้ฟังก์ชันที่ส่งคืน error ผู้เรียกใช้ควรตรวจสอบว่า error มีค่าเป็น nil หรือไม่ ถ้าไม่เป็น nil แสดงว่ามีข้อผิดพลาดเกิดขึ้น
- ถ้าฟังก์ชันไม่ส่งคืนค่าที่มีความหมายอื่นๆ นอกจาก error สามารถส่งคืนเพียง error อย่างเดียวได้

การจัดการ error ในภาษา Go ทำได้โดยการตรวจสอบค่า error ที่ส่งคืนจากฟังก์ชัน ถ้ามีค่าไม่เป็น nil ควรแสดงข้อผิดพลาดและจัดการตามความเหมาะสม แต่ถ้าเป็น nil แสดงว่าไม่มีข้อผิดพลาด สามารถดำเนินการต่อไปได้ตามปกติ
*/

func main() {
	// ตัวอย่างการใช้ฟังก์ชัน os.Open
	file, err := os.Open("myfile.txt")
	if err != nil {
		// ถ้ามี error เกิดขึ้น จะแสดง error และจบการทำงาน
		log.Fatal(err)
	}
	// ถ้าไม่มี error เราจะใช้คำสั่ง defer เพื่อปิดไฟล์หลังจบการทำงาน จากนั้นเราสามารถทำงานอย่างอื่นกับไฟล์ต่อไป
	defer file.Close()
	// ทำงานอย่างอื่นกับไฟล์ต่อไป...

	// ตัวอย่างการใช้ฟังก์ชัน os.Mkdir
	err = os.Mkdir("mydir", 0755)
	if err != nil {
		// ถ้ามี error เกิดขึ้น จะแสดง error และจบการทำงาน
		log.Fatal(err)
	}
	// ถ้าไม่มี error แสดงว่าสร้างไดเรกทอรีสำเร็จ
	fmt.Println("Directory created successfully")
}

/*

 */
